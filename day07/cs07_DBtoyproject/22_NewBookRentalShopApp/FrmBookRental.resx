<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAN0AAADdAAAAAAEAAAAB
        AAD///8A29vbAHTR/wB3ZkQAcWJEAOPd0gB31fwAc1xAAHbW/AByXkAAcV1CAHJfQgB21v0Acl9BAHJe
        QQB1s8kA5t3PAHfW/ADh2MoApJWAAHfV/QB0naUAcl5BAHJeQQB41fwAd9X8AOXczwDYzb4Ad9X8AHJe
        QQByX0IAcl9DAHJgRQByYUUAcmFGAHJiRwByY0kAcmRKAHJkSwByZ08AcmhRAHJpUgByaVMAc2tVAHNs
        VwBzbFgAc25aAHNwXgBzcmAAc3doAHN4aQBzeGoAc3tvAHN/dQBzgXcAdIJ6AHSEfAB0iIQAdIqHAHSL
        iAB0jIkAdI2LAHSOjQB0kZEAdJOVAHSWmgB0mZ0AdJmeAHWboQB1nKIAdZ2kAHWhqgB1oqwAdaSuAHWm
        swB1qLYAdaq5AHWuvgB1r8EAdbDBAHWxxAB2s8YAdrPHAHa0yAB2tcoAdrfMAHa3zQB2uM4A5dzPAHa6
        0gB2u9MAdrzVAHa+1wB2wd0AdsLfAHbE4QB2xeIAdsblAHbH5wB3y+wAcMbtAHDH7gBxyO8Ad83wAHfP
        8wBzzfQAd9D0AHTP9gB00PcAd9L4AHfU+gB31PsAd9X8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhQYGBgYGBgYGBgYGBgYGBgY
        GBgYGBgYGBgYGBgYFAYZZmVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVmGW9lcHBwcHBwcHBwcHBw
        cHBwcHBwcHBwcHBwcHBwcGVvb2VwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwZW9vZXBwcHBwcHBw
        cHBwcHBwcHBwcHBwcHBwcHBwcHBlb29lcHBUVHBBYnBDNDQ8b2dFcHBUSXBwcEpecHBwcGVvb2VwcD4+
        VSFhcCk7Rk1wViJwZyo0cHBwMkdwcHBwZW9vZXBwPj4xP3BwKVJwcHBWInA6HTRwcHAyR3BwcHBlb29l
        cHA+Hx9EcHAkKy83b1YiUyE5NHBwcDJHcHBwcGVvb2VwcD44TCJdcCdAS1dwViAsQkY0cHBwMkdwcHBw
        ZW9vZXBwPj5qKFFwKVJwcHBWHTBtRjRwcHAyR3BwcHBlb29lcHBAJSYzb3AuKC01b1oeWXBINnA9LSMn
        LVBwcGVvb2VwcGhPW3BwcF9PT1xwcGBwcG5jcF5PS05PaHBwZW9vZXBwcHBwcHBwcHBwcHBwcHBwcHBw
        cHBwcHBwcHBlb29lcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcGVvHGRra2tra2tra2tra2tra2tr
        a2tra2tra2tra2trZBwRbGlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlsEQIIDAwMDAwMDAwMDBUP
        DAwMDA8VDAwMDAwMDAwMDAgCAAAAAAAAAAAAAAAACg0AAAAADQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAEFgAAAAAWBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXBAAABBcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAA4LAQELDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxMaGhMHAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAADG1hYGwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASWFgSAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAUQEAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/zz///88////mf///4H///+B////gf///8
        P////D//////////////////
</value>
  </data>
</root>